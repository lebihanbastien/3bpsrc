function [tmdn, ymdn, yma] = diff_corr_level_I(tmd, ymd, N2, dcs, inputType, isTimeFixed)

%--------------------------------------------------------------------------
% Copy the departure state
%--------------------------------------------------------------------------
tmdn = tmd;
ymdn = ymd;

%--------------------------------------------------------------------------
% Vector that will contain all corrections to make at all patch points
%--------------------------------------------------------------------------
if(isTimeFixed)
    kv = zeros(3, N2-1);
else
    kv = zeros(4, N2-1);
end

%--------------------------------------------------------------------------
% Loop correction
%--------------------------------------------------------------------------
iter = 0;
while(iter < 50)
    
    %----------------------------------------------------------------------
    % Norm check
    %----------------------------------------------------------------------
    normC = 0.0;
    
    %----------------------------------------------------------------------
    % Arrival state
    %----------------------------------------------------------------------
    yma = zeros(N2, 42);
    yma(1, :) = ymd(1,:);
    
    %----------------------------------------------------------------------
    % Level one
    %----------------------------------------------------------------------
    for k = 1:N2-1
        %------------------------------------------------------------------
        % Integration
        %------------------------------------------------------------------
        [tm, ym] = ode78_qbcp([tmdn(k) tmdn(k+1)], ymdn(k,:), dcs, 1, inputType, inputType);
        
        %------------------------------------------------------------------
        % Final position is at the end of ym
        %------------------------------------------------------------------
        ye = ym(end,:)';
        te = tm(end);
        
        %------------------------------------------------------------------
        % Arrival state (including STM)
        %------------------------------------------------------------------
        yma(k+1, :)  = ye;
        

        %------------------------------------------------------------------
        % Update the Jacobian
        %------------------------------------------------------------------
        % STM
        STM = vectorToMatrix(ye, 6, 6, 6);
        % Derivatives at tf
        yedot = qbcp_vfn_novar(te, ye(1:6), dcs)';
        % Jacobian
        if(isTimeFixed)
            L = STM(1:3,4:6);
        else
            L = [STM(1:3,4:6) yedot(1:3)];
        end
        
        %------------------------------------------------------------------
        % Update the error vector
        %------------------------------------------------------------------
        b = ye(1:3) - ymdn(k+1,1:3)';

        %------------------------------------------------------------------
        % Norm
        %------------------------------------------------------------------
        normC = normC + norm(b);
        
        %------------------------------------------------------------------
        % Minimum norm solution
        %------------------------------------------------------------------
        if(isTimeFixed)
            kv(:,k) = L \ b;
        else
            kv(:,k) = L'*(L*L'\b);
        end
    end
        
    %----------------------------------------------------------------------
    % Check that all points are under a given threshold
    %----------------------------------------------------------------------
    fprintf('normC = %5.15e\n', normC);
    if(normC < 1e-9)
            break;
    end
    
    %----------------------------------------------------------------------
    % Update the free variables
    %----------------------------------------------------------------------
    for k = 1:N2-1
        % The state at position k
        ymdn(k,4:6) = ymdn(k, 4:6) - kv(1:3, k)';
        
        % The final time, at position k+1
        if(~isTimeFixed)
            tmdn(k+1)   = tmdn(k+1) - kv(4, k);
        end
    end
    
    
    %----------------------------------------------------------------------
    % Update number of iterations
    %----------------------------------------------------------------------
    iter = iter + 1;
end


%--------------------------------------------------------------------------
% Plot
%--------------------------------------------------------------------------
figure(1)
hold on
grid on;

% Arrival
plot(yma(:,1),   yma(:,2), 'go', 'LineWidth', 2);
quiver(yma(:,1),  yma(:,2), yma(:,4),  yma(:,5), 'Color', 'g');

% Departure
plot(ymdn(:,1),   ymdn(:,2), 'm+', 'LineWidth', 2);
quiver(ymdn(:,1),  ymdn(:,2), ymdn(:,4),  ymdn(:,5), 'Color', 'm');


%--------------------------------------------------------------------------
% Plot (2)
%--------------------------------------------------------------------------
for k = 1:N2-1
        [~, ym] = ode78_qbcp([tmdn(k) tmdn(k+1)], ymdn(k,:), dcs, 100, inputType, inputType);
        plot(ym(:,1),   ym(:,2), 'g', 'LineWidth', 2);
end


end

