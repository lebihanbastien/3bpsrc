/*==========================================================
 * test.c - example in MATLAB External Interfaces
 *
 * Example of mex file
 *========================================================*/

//Mex
#include "mex.h"

//Custom
#include "C/custom_ode.h"
#include "C/cr3bp_derivatives.h"

//GSL
#include <gsl/gsl_odeiv2.h>
#include <gsl/gsl_errno.h>

/* The gateway function */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
{
//     double multiplier;              /* input scalar */
//     double *inMatrix;               /* 1xN input matrix */
//     size_t ncols;                   /* size of matrix */
//     double *outMatrix;              /* output matrix */
// 
//     /* check for proper number of arguments */
//     if(nrhs!=2) {
//         mexErrMsgIdAndTxt("MyToolbox:arrayProduct:nrhs","Two inputs required.");
//     }
//     if(nlhs!=1) {
//         mexErrMsgIdAndTxt("MyToolbox:arrayProduct:nlhs","One output required.");
//     }
//     /* make sure the first input argument is scalar */
//     if( !mxIsDouble(prhs[0]) || 
//          mxIsComplex(prhs[0]) ||
//          mxGetNumberOfElements(prhs[0])!=1 ) {
//         mexErrMsgIdAndTxt("MyToolbox:arrayProduct:notScalar","Input multiplier must be a scalar.");
//     }
//     
//     /* make sure the second input argument is type double */
//     if( !mxIsDouble(prhs[1]) || 
//          mxIsComplex(prhs[1])) {
//         mexErrMsgIdAndTxt("MyToolbox:arrayProduct:notDouble","Input matrix must be type double.");
//     }
//     
//     /* check that number of rows in second input argument is 1 */
//     if(mxGetM(prhs[1])!=1) {
//         mexErrMsgIdAndTxt("MyToolbox:arrayProduct:notRowVector","Input must be a row vector.");
//     }
//     
//     /* get the value of the scalar input  */
//     multiplier = mxGetScalar(prhs[0]);
// 
//     /* create a pointer to the real data in the input matrix  */
//     inMatrix = mxGetPr(prhs[1]);
// 
//     /* get dimensions of the input matrix */
//     ncols = mxGetN(prhs[1]);
// 
//     /* create the output matrix */
//     plhs[0] = mxCreateDoubleMatrix(1,(mwSize)ncols,mxREAL);
// 
//     /* get a pointer to the real data in the output matrix */
//     outMatrix = mxGetPr(plhs[0]);

    /* call the computational routine */
    //arrayProduct(multiplier,inMatrix,outMatrix,(mwSize)ncols);
    
    
    //---------------------------------------------------------------------
    // Integration & Root-finding
    //---------------------------------------------------------------------
    //Stepper
    const gsl_odeiv2_step_type *T = gsl_odeiv2_step_rk8pd;
    custom_ode_structure ode_s, ode_s_6;

    //Root-finding
    const gsl_root_fsolver_type *T_root = gsl_root_fsolver_brent; //Brent-Dekker root finding method

    double mu = mxGetScalar(prhs[0]);
    //General structures
    init_ode_structure(&ode_s,   T, T_root, 1e-14, 1e-14, 1e-12, 1e-12, 42, 1e-6, cr3bp_derivatives_42, NULL, &mu);
    init_ode_structure(&ode_s_6, T, T_root, 1e-14, 1e-14, 1e-12, 1e-12, 6, 1e-6, cr3bp_derivatives_6, NULL, &mu);
    
    double *y0 = mxGetPr(prhs[2]);
    //---------------------------------------------------------------------
    // Integration over one period
    //---------------------------------------------------------------------
    double t = 0;
    double t1 = mxGetScalar(prhs[1]);
    double y[6];
    
    for(int i = 0; i < 6; i++) y[i] = y0[i];    
    
    //printf("y(0):\n");
    //for(int i = 0; i < 6; i++) printf("%5.5f\n", y[i]);
    
    //Apply ode
    gsl_odeiv2_driver_apply (ode_s_6.d, &t, t1, y);
    
    
     /* create the output matrix */
     plhs[0] = mxCreateDoubleMatrix(1,6,mxREAL);
 
     /* get a pointer to the real data in the output matrix */
    double *outMatrix = mxGetPr(plhs[0]);
     
    for(int i = 0; i < 6; i++) outMatrix[i] = y[i];   
    
    //printf("y(t1):\n");
    //for(int i = 0; i < 6; i++) printf("%5.5f ", y[i]);

    
    
}